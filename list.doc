Priority:

-Dictionary
 **--Chatgpt API can be used maybe instead of YouGlish API

-Modules
 **--UI
 **--ARRANGE and fulfill the content
 **-- For listening add both men and women voices with OpenAI
 --Mini matching game via tapping
 --Score
 --OpenAI
 --RECORDING

-Profile
**-- 403 Page- When the username or password is wrong for the login
 **--Term & Conditions Page
 --Contact Form Function
 *--Login Page=>Forgot Password? Link
* --RegisterForum UI + details like questions
 --Billing System
 --Login Forum, Sign in with Google, Github
-ContactForum
 --Email sending
 --Recaptcha


---------------------------
  {% comment %} <div class="modules__container">
    <div class="module-grid">
      {% for module in modules %}
        <div class="module-card">
          <h2>{{ module.module_title }}</h2>
          <p>{{ module.module_description }}</p>
          <a href="{% url 'modules:lessons' module.pk %}" class="btn btn-primary">Start Learning</a>
        </div>
      {% empty %}
        <p>No modules available.</p>
      {% endfor %}
    </div>
  </div> {% endcomment %}

  ------------------------------

  # def generate_speech():
#     client=OpenAI(api_key = "sk-proj-8tsKt51ax7c9AoOO3RYST3BlbkFJkVGybZPjPoHTxK1LZXIm")
#     speech_file_path = Path(__file__).parent / "speech.mp3"
#     speech_file_path = Path(__file__).parent / "speech2.mp3"

#     with client.audio.speech.with_streaming_response.create(
#         model="tts-1",
#         voice="alloy",
#         input="I see skies of blue and clouds of white\nThe bright blessed days, the dark sacred nights\nAnd I think to myself\nWhat a wonderful world"
#     ) as response:
#         response.stream_to_file(speech_file_path)
        
#     with client.audio.speech.with_streaming_response.create(
#         model="tts-1",
#         voice="echo",
#         input="Okay guys we'll learn English"
#     ) as response:
#         response.stream_to_file(speech_file_path)
        
# generate_speech()

#Still not applied for now
# def calculate_cost(text_string, model_id):
#     cost_tier = {
#         'tts-1': 0.015,
#         'tts-1-hd': 0.03
#     }
#     cost_unit = cost_tier.get(model_id, None)
#     if cost_unit is None:
#         return None
#     return (cost_unit * len(text_string)) / 1000


